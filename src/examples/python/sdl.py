
#!/usr/bin/env python3

# 
# Do not modify this file - it is autogenerated by ./gen_py_funcs.py
#

import time
import settings
from newlog import newlog
from utils import packetWrap, responseUnwrap, packetToReturnCode
from iodev import IoFifo, IoSerial, IoI2c, IoSpi

logger = newlog(__name__)

# New IO device instance - change to the class you want to use
#i = IoFifo()
i = IoSerial()

dev = "/dev/pts/6"

# Change this to your desired initialisation params
#i.open(read_fifo = settings.FIFO_CLIENT_NAME, write_fifo = settings.FIFO_MASTER_NAME)
i.open(device = dev, nonblock=True)

logger.debug("Reading any remaining data in input buffer")
i.read()
i.close()
i.open(device = dev)
logger.debug("Ready")



def SDL_Quit():
	''' Autogenerated call for function SDL_Quit'''

	datasent = packetWrap("00", [])	
	logger.debug("Sending " + str(datasent))

	start = time.time()
	# Send request
	bytes_sent = i.write(datasent)
	dataread = None

	# Wait for response
	while dataread is None:
		dataread = i.read()
		if time.time() > (start + settings.TIMEOUT):
			logger.warn("Timer exceeded waiting for response")
			break
	logger.debug("Function call took " + str(time.time() - start) + "s")
	# Decode and return response value
	if dataread is not None:
		return packetToReturnCode("00", dataread)
	else:
		logger.warn('No response data')
		return False
 

def SDL_Init(flags):
	''' Autogenerated call for function SDL_Init'''

	datasent = packetWrap("01", [flags])	
	logger.debug("Sending " + str(datasent))

	start = time.time()
	# Send request
	bytes_sent = i.write(datasent)
	dataread = None

	# Wait for response
	while dataread is None:
		dataread = i.read()
		if time.time() > (start + settings.TIMEOUT):
			logger.warn("Timer exceeded waiting for response")
			break
	logger.debug("Function call took " + str(time.time() - start) + "s")
	# Decode and return response value
	if dataread is not None:
		return packetToReturnCode("01", dataread)
	else:
		logger.warn('No response data')
		return False
 

def SDL_GetCurrentVideoDriver():
	''' Autogenerated call for function SDL_GetCurrentVideoDriver'''

	datasent = packetWrap("02", [])	
	logger.debug("Sending " + str(datasent))

	start = time.time()
	# Send request
	bytes_sent = i.write(datasent)
	dataread = None

	# Wait for response
	while dataread is None:
		dataread = i.read()
		if time.time() > (start + settings.TIMEOUT):
			logger.warn("Timer exceeded waiting for response")
			break
	logger.debug("Function call took " + str(time.time() - start) + "s")
	# Decode and return response value
	if dataread is not None:
		return packetToReturnCode("02", dataread)
	else:
		logger.warn('No response data')
		return False
 

def SDL_CreateWindow(title,x,y,w,h,bpp):
	''' Autogenerated call for function SDL_CreateWindow'''

	datasent = packetWrap("03", [title,x,y,w,h,bpp])	
	logger.debug("Sending " + str(datasent))

	start = time.time()
	# Send request
	bytes_sent = i.write(datasent)
	dataread = None

	# Wait for response
	while dataread is None:
		dataread = i.read()
		if time.time() > (start + settings.TIMEOUT):
			logger.warn("Timer exceeded waiting for response")
			break
	logger.debug("Function call took " + str(time.time() - start) + "s")
	# Decode and return response value
	if dataread is not None:
		return packetToReturnCode("03", dataread)
	else:
		logger.warn('No response data')
		return False
 

def SDL_CreateRenderer(window,index,flags):
	''' Autogenerated call for function SDL_CreateRenderer'''

	datasent = packetWrap("04", [window,index,flags])	
	logger.debug("Sending " + str(datasent))

	start = time.time()
	# Send request
	bytes_sent = i.write(datasent)
	dataread = None

	# Wait for response
	while dataread is None:
		dataread = i.read()
		if time.time() > (start + settings.TIMEOUT):
			logger.warn("Timer exceeded waiting for response")
			break
	logger.debug("Function call took " + str(time.time() - start) + "s")
	# Decode and return response value
	if dataread is not None:
		return packetToReturnCode("04", dataread)
	else:
		logger.warn('No response data')
		return False
 

def SDL_CreateRGBSurface(flags,w,h,bpp,rmask,gmask,bmask,alpha):
	''' Autogenerated call for function SDL_CreateRGBSurface'''

	datasent = packetWrap("05", [flags,w,h,bpp,rmask,gmask,bmask,alpha])	
	logger.debug("Sending " + str(datasent))

	start = time.time()
	# Send request
	bytes_sent = i.write(datasent)
	dataread = None

	# Wait for response
	while dataread is None:
		dataread = i.read()
		if time.time() > (start + settings.TIMEOUT):
			logger.warn("Timer exceeded waiting for response")
			break
	logger.debug("Function call took " + str(time.time() - start) + "s")
	# Decode and return response value
	if dataread is not None:
		return packetToReturnCode("05", dataread)
	else:
		logger.warn('No response data')
		return False
 

def SDL_MapRGB(surface,r,g,b):
	''' Autogenerated call for function SDL_MapRGB'''

	datasent = packetWrap("06", [surface,r,g,b])	
	logger.debug("Sending " + str(datasent))

	start = time.time()
	# Send request
	bytes_sent = i.write(datasent)
	dataread = None

	# Wait for response
	while dataread is None:
		dataread = i.read()
		if time.time() > (start + settings.TIMEOUT):
			logger.warn("Timer exceeded waiting for response")
			break
	logger.debug("Function call took " + str(time.time() - start) + "s")
	# Decode and return response value
	if dataread is not None:
		return packetToReturnCode("06", dataread)
	else:
		logger.warn('No response data')
		return False
 

def SDL_FillRect(surface,rect,rgb):
	''' Autogenerated call for function SDL_FillRect'''

	datasent = packetWrap("07", [surface,rect,rgb])	
	logger.debug("Sending " + str(datasent))

	start = time.time()
	# Send request
	bytes_sent = i.write(datasent)
	dataread = None

	# Wait for response
	while dataread is None:
		dataread = i.read()
		if time.time() > (start + settings.TIMEOUT):
			logger.warn("Timer exceeded waiting for response")
			break
	logger.debug("Function call took " + str(time.time() - start) + "s")
	# Decode and return response value
	if dataread is not None:
		return packetToReturnCode("07", dataread)
	else:
		logger.warn('No response data')
		return False
 

def SDL_CreateTextureFromSurface(renderer,surface):
	''' Autogenerated call for function SDL_CreateTextureFromSurface'''

	datasent = packetWrap("08", [renderer,surface])	
	logger.debug("Sending " + str(datasent))

	start = time.time()
	# Send request
	bytes_sent = i.write(datasent)
	dataread = None

	# Wait for response
	while dataread is None:
		dataread = i.read()
		if time.time() > (start + settings.TIMEOUT):
			logger.warn("Timer exceeded waiting for response")
			break
	logger.debug("Function call took " + str(time.time() - start) + "s")
	# Decode and return response value
	if dataread is not None:
		return packetToReturnCode("08", dataread)
	else:
		logger.warn('No response data')
		return False
 

def SDL_RenderCopy(renderer,surface,rect,rect2):
	''' Autogenerated call for function SDL_RenderCopy'''

	datasent = packetWrap("09", [renderer,surface,rect,rect2])	
	logger.debug("Sending " + str(datasent))

	start = time.time()
	# Send request
	bytes_sent = i.write(datasent)
	dataread = None

	# Wait for response
	while dataread is None:
		dataread = i.read()
		if time.time() > (start + settings.TIMEOUT):
			logger.warn("Timer exceeded waiting for response")
			break
	logger.debug("Function call took " + str(time.time() - start) + "s")
	# Decode and return response value
	if dataread is not None:
		return packetToReturnCode("09", dataread)
	else:
		logger.warn('No response data')
		return False
 

def SDL_RenderPresent(renderer):
	''' Autogenerated call for function SDL_RenderPresent'''

	datasent = packetWrap("0A", [renderer])	
	logger.debug("Sending " + str(datasent))

	start = time.time()
	# Send request
	bytes_sent = i.write(datasent)
	dataread = None

	# Wait for response
	while dataread is None:
		dataread = i.read()
		if time.time() > (start + settings.TIMEOUT):
			logger.warn("Timer exceeded waiting for response")
			break
	logger.debug("Function call took " + str(time.time() - start) + "s")
	# Decode and return response value
	if dataread is not None:
		return packetToReturnCode("0A", dataread)
	else:
		logger.warn('No response data')
		return False
 

