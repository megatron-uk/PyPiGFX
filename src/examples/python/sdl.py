
#!/usr/bin/env python3

# 
# Do not modify this file - it is autogenerated by ./gen_py_funcs.py
#

import time
import settings
from newlog import newlog
from utils import responseUnwrap
from iodev import IoFifo

logger = newlog(__name__)

# New IO device instance - change to the class you want to use
i = IoFifo()

# Change this to your desired initialisation params
i.open(read_fifo = settings.FIFO_CLIENT_NAME, write_fifo = settings.FIFO_MASTER_NAME)

# Attempt to flush any buffered data in the input queue
logger.debug("Waiting for buffered data to clear")
d = "INITIAL_DATA"
while d is not None:
	d = i.read()
logger.debug("Ready")



def SDL_Quit():
	''' Autogenerated call for function SDL_Quit'''	
	vals = []
	if len(vals)>1:
		val_s = ","
		for val in vals:
			val_s = val_s.join(str(val))
		datasent = "<00(" + val_s + ")>"
	elif len(vals) == 1:
		datasent = "<00(" + str(vals[0]) + ")>"
	else:
		datasent = "<00()>"
	logger.debug("Sending " + str(datasent))

	start = time.time()
	# Send request
	bytes_sent = i.write(datasent)
	dataread = None
	m = 0

	# Wait for response
	while dataread is None:
		dataread = i.read()
		if time.time() > (start + settings.TIMEOUT):
			logger.warn("Timer exceeded waiting for response")
			break

	logger.debug("Call and response took " + str(time.time() - start)	+ "s")
	# Decode and return response value
	if dataread is not None:
		decoded = responseUnwrap(dataread)
		return decoded['value']
	else:
		logger.warn('No response data')
		return False
 

def SDL_Init(flags):
	''' Autogenerated call for function SDL_Init'''	
	vals = [flags]
	if len(vals)>1:
		val_s = ","
		for val in vals:
			val_s = val_s.join(str(val))
		datasent = "<01(" + val_s + ")>"
	elif len(vals) == 1:
		datasent = "<01(" + str(vals[0]) + ")>"
	else:
		datasent = "<01()>"
	logger.debug("Sending " + str(datasent))

	start = time.time()
	# Send request
	bytes_sent = i.write(datasent)
	dataread = None
	m = 0

	# Wait for response
	while dataread is None:
		dataread = i.read()
		if time.time() > (start + settings.TIMEOUT):
			logger.warn("Timer exceeded waiting for response")
			break

	logger.debug("Call and response took " + str(time.time() - start)	+ "s")
	# Decode and return response value
	if dataread is not None:
		decoded = responseUnwrap(dataread)
		return decoded['value']
	else:
		logger.warn('No response data')
		return False
 

def SDL_GetCurrentVideoDriver():
	''' Autogenerated call for function SDL_GetCurrentVideoDriver'''	
	vals = []
	if len(vals)>1:
		val_s = ","
		for val in vals:
			val_s = val_s.join(str(val))
		datasent = "<02(" + val_s + ")>"
	elif len(vals) == 1:
		datasent = "<02(" + str(vals[0]) + ")>"
	else:
		datasent = "<02()>"
	logger.debug("Sending " + str(datasent))

	start = time.time()
	# Send request
	bytes_sent = i.write(datasent)
	dataread = None
	m = 0

	# Wait for response
	while dataread is None:
		dataread = i.read()
		if time.time() > (start + settings.TIMEOUT):
			logger.warn("Timer exceeded waiting for response")
			break

	logger.debug("Call and response took " + str(time.time() - start)	+ "s")
	# Decode and return response value
	if dataread is not None:
		decoded = responseUnwrap(dataread)
		return decoded['value']
	else:
		logger.warn('No response data')
		return False
 

def SDL_CreateWindow(title,x,y,w,h,bpp):
	''' Autogenerated call for function SDL_CreateWindow'''	
	vals = [title,x,y,w,h,bpp]
	if len(vals)>1:
		val_s = ","
		for val in vals:
			val_s = val_s.join(str(val))
		datasent = "<03(" + val_s + ")>"
	elif len(vals) == 1:
		datasent = "<03(" + str(vals[0]) + ")>"
	else:
		datasent = "<03()>"
	logger.debug("Sending " + str(datasent))

	start = time.time()
	# Send request
	bytes_sent = i.write(datasent)
	dataread = None
	m = 0

	# Wait for response
	while dataread is None:
		dataread = i.read()
		if time.time() > (start + settings.TIMEOUT):
			logger.warn("Timer exceeded waiting for response")
			break

	logger.debug("Call and response took " + str(time.time - start)	+ "s")
	# Decode and return response value
	if dataread is not None:
		decoded = responseUnwrap(dataread)
		return decoded['value']
	else:
		logger.warn('No response data')
		return False
 

def SDL_CreateRenderer(window,index,flags):
	''' Autogenerated call for function SDL_CreateRenderer'''	
	vals = [window,index,flags]
	if len(vals)>1:
		val_s = ","
		for val in vals:
			val_s = val_s.join(str(val))
		datasent = "<04(" + val_s + ")>"
	elif len(vals) == 1:
		datasent = "<04(" + str(vals[0]) + ")>"
	else:
		datasent = "<04()>"
	logger.debug("Sending " + str(datasent))

	start = time.time()
	# Send request
	bytes_sent = i.write(datasent)
	dataread = None
	m = 0

	# Wait for response
	while dataread is None:
		dataread = i.read()
		if time.time() > (start + settings.TIMEOUT):
			logger.warn("Timer exceeded waiting for response")
			break

	logger.debug("Call and response took " + str(time.time - start)	+ "s")
	# Decode and return response value
	if dataread is not None:
		decoded = responseUnwrap(dataread)
		return decoded['value']
	else:
		logger.warn('No response data')
		return False
 

def SDL_CreateRGBSurface(flags,w,h,bpp,rmask,gmask,bmask,alpha):
	''' Autogenerated call for function SDL_CreateRGBSurface'''	
	vals = [flags,w,h,bpp,rmask,gmask,bmask,alpha]
	if len(vals)>1:
		val_s = ","
		for val in vals:
			val_s = val_s.join(str(val))
		datasent = "<05(" + val_s + ")>"
	elif len(vals) == 1:
		datasent = "<05(" + str(vals[0]) + ")>"
	else:
		datasent = "<05()>"
	logger.debug("Sending " + str(datasent))

	start = time.time()
	# Send request
	bytes_sent = i.write(datasent)
	dataread = None
	m = 0

	# Wait for response
	while dataread is None:
		dataread = i.read()
		if time.time() > (start + settings.TIMEOUT):
			logger.warn("Timer exceeded waiting for response")
			break

	logger.debug("Call and response took " + str(time.time - start)	+ "s")
	# Decode and return response value
	if dataread is not None:
		decoded = responseUnwrap(dataread)
		return decoded['value']
	else:
		logger.warn('No response data')
		return False
 

def SDL_MapRGB(surface,r,g,b):
	''' Autogenerated call for function SDL_MapRGB'''	
	vals = [surface,r,g,b]
	if len(vals)>1:
		val_s = ","
		for val in vals:
			val_s = val_s.join(str(val))
		datasent = "<06(" + val_s + ")>"
	elif len(vals) == 1:
		datasent = "<06(" + str(vals[0]) + ")>"
	else:
		datasent = "<06()>"
	logger.debug("Sending " + str(datasent))

	start = time.time()
	# Send request
	bytes_sent = i.write(datasent)
	dataread = None
	m = 0

	# Wait for response
	while dataread is None:
		dataread = i.read()
		if time.time() > (start + settings.TIMEOUT):
			logger.warn("Timer exceeded waiting for response")
			break

	logger.debug("Call and response took " + str(time.time - start)	+ "s")
	# Decode and return response value
	if dataread is not None:
		decoded = responseUnwrap(dataread)
		return decoded['value']
	else:
		logger.warn('No response data')
		return False
 

def SDL_FillRect(surface,rect,rgb):
	''' Autogenerated call for function SDL_FillRect'''	
	vals = [surface,rect,rgb]
	if len(vals)>1:
		val_s = ","
		for val in vals:
			val_s = val_s.join(str(val))
		datasent = "<07(" + val_s + ")>"
	elif len(vals) == 1:
		datasent = "<07(" + str(vals[0]) + ")>"
	else:
		datasent = "<07()>"
	logger.debug("Sending " + str(datasent))

	start = time.time()
	# Send request
	bytes_sent = i.write(datasent)
	dataread = None
	m = 0

	# Wait for response
	while dataread is None:
		dataread = i.read()
		if time.time() > (start + settings.TIMEOUT):
			logger.warn("Timer exceeded waiting for response")
			break

	logger.debug("Call and response took " + str(time.time - start)	+ "s")
	# Decode and return response value
	if dataread is not None:
		decoded = responseUnwrap(dataread)
		return decoded['value']
	else:
		logger.warn('No response data')
		return False
 

def SDL_CreateTextureFromSurface(renderer,surface):
	''' Autogenerated call for function SDL_CreateTextureFromSurface'''	
	vals = [renderer,surface]
	if len(vals)>1:
		val_s = ","
		for val in vals:
			val_s = val_s.join(str(val))
		datasent = "<08(" + val_s + ")>"
	elif len(vals) == 1:
		datasent = "<08(" + str(vals[0]) + ")>"
	else:
		datasent = "<08()>"
	logger.debug("Sending " + str(datasent))

	start = time.time()
	# Send request
	bytes_sent = i.write(datasent)
	dataread = None
	m = 0

	# Wait for response
	while dataread is None:
		dataread = i.read()
		if time.time() > (start + settings.TIMEOUT):
			logger.warn("Timer exceeded waiting for response")
			break

	logger.debug("Call and response took " + str(time.time - start)	+ "s")
	# Decode and return response value
	if dataread is not None:
		decoded = responseUnwrap(dataread)
		return decoded['value']
	else:
		logger.warn('No response data')
		return False
 

def SDL_RenderCopy(renderer,surface,rect,rect2):
	''' Autogenerated call for function SDL_RenderCopy'''	
	vals = [renderer,surface,rect,rect2]
	if len(vals)>1:
		val_s = ","
		for val in vals:
			val_s = val_s.join(str(val))
		datasent = "<09(" + val_s + ")>"
	elif len(vals) == 1:
		datasent = "<09(" + str(vals[0]) + ")>"
	else:
		datasent = "<09()>"
	logger.debug("Sending " + str(datasent))

	start = time.time()
	# Send request
	bytes_sent = i.write(datasent)
	dataread = None
	m = 0

	# Wait for response
	while dataread is None:
		dataread = i.read()
		if time.time() > (start + settings.TIMEOUT):
			logger.warn("Timer exceeded waiting for response")
			break

	logger.debug("Call and response took " + str(time.time - start)	+ "s")
	# Decode and return response value
	if dataread is not None:
		decoded = responseUnwrap(dataread)
		return decoded['value']
	else:
		logger.warn('No response data')
		return False
 

def SDL_RenderPresent(renderer):
	''' Autogenerated call for function SDL_RenderPresent'''	
	vals = [renderer]
	if len(vals)>1:
		val_s = ","
		for val in vals:
			val_s = val_s.join(str(val))
		datasent = "<0A(" + val_s + ")>"
	elif len(vals) == 1:
		datasent = "<0A(" + str(vals[0]) + ")>"
	else:
		datasent = "<0A()>"
	logger.debug("Sending " + str(datasent))

	start = time.time()
	# Send request
	bytes_sent = i.write(datasent)
	dataread = None
	m = 0

	# Wait for response
	while dataread is None:
		dataread = i.read()
		if time.time() > (start + settings.TIMEOUT):
			logger.warn("Timer exceeded waiting for response")
			break

	logger.debug("Call and response took " + str(time.time - start)	+ "s")
	# Decode and return response value
	if dataread is not None:
		decoded = responseUnwrap(dataread)
		return decoded['value']
	else:
		logger.warn('No response data')
		return False
 

