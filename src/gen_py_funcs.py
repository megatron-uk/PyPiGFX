#!/usr/bin/env python3

##################################
#
# This script programatically 
# generates a Python module of all
# the SDL_Functions we have imple-
# -mented, including wrapping them
# in iodev send/receive calls.
#
##################################

import settings
from sdldefs import SDL_FUNCTIONS


f_header = """
#!/usr/bin/env python3

# 
# Do not modify this file - it is autogenerated by %s
#

import time
import settings
from newlog import newlog
from utils import responseUnwrap
from iodev import IoFifo

logger = newlog(__name__)

# New IO device instance - change to the class you want to use
i = IoFifo()

# Change this to your desired initialisation params
i.open(read_fifo = settings.FIFO_CLIENT_NAME, write_fifo = settings.FIFO_MASTER_NAME)

# Attempt to flush any buffered data in the input queue
logger.debug("Waiting for buffered data to clear")
d = "INITIAL_DATA"
while d is not None:
	d = i.read()
logger.debug("Ready")

""" % (__file__)

f_func = ""

for sdl_key in SDL_FUNCTIONS.keys():
	sdl_func = SDL_FUNCTIONS[sdl_key]
	params_names_ = sdl_func["PARAMS_NAMES"]
	params_names = []
	suffix = 1
	for p in params_names_:
		if p not in params_names:
			params_names.append(p)
		else:
			new_p = p
			suffix = 1
			missing = True
			while missing is True:
				if new_p not in params_names:
					params_names.append(new_p)
					missing = False
				else:
					suffix += 1
					new_p = p + str(suffix)

	f_args = ","
	f_args = f_args.join(params_names)
	f_func += """
def %s(%s):
	''' Autogenerated call for function %s'''	
	vals = [%s]
	if len(vals)>1:
		val_s = ","
		for val in vals:
			val_s = val_s.join(str(val))
		datasent = "<%s(" + val_s + ")>"
	elif len(vals) == 1:
		datasent = "<%s(" + str(vals[0]) + ")>"
	else:
		datasent = "<%s()>"
	logger.debug("Sending " + str(datasent))

	start = time.time()
	# Send request
	bytes_sent = i.write(datasent)
	dataread = None
	m = 0

	# Wait for response
	while dataread is None:
		dataread = i.read()
		if time.time() > (start + settings.TIMEOUT):
			logger.warn("Timer exceeded waiting for response")
			break

	logger.debug("Call and response took " + str(time.time - start)	+ "s")
	# Decode and return response value
	if dataread is not None:
		decoded = responseUnwrap(dataread)
		return decoded['value']
	else:
		logger.warn('No response data')
		return False
 
""" % (sdl_func["SDL_NAME"], f_args, sdl_func["SDL_NAME"], f_args, sdl_key, sdl_key, sdl_key)

print(f_header)
print(f_func)
