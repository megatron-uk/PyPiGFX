#!/usr/bin/env python3

##################################
#
# This script programatically 
# generates a Python module of all
# the SDL_Functions we have imple-
# -mented, including wrapping them
# in iodev send/receive calls.
#
##################################

import settings
from sdldefs import SDL_FUNCTIONS


f_header = """
#!/usr/bin/env python3

# 
# Do not modify this file - it is autogenerated by %s
#

import time
import settings
from newlog import newlog
from utils import packetWrap, responseUnwrap, packetToReturnCode
from iodev import IoFifo, IoSerial, IoI2c, IoSpi

logger = newlog(__name__)

# New IO device instance - change to the class you want to use
#i = IoFifo()
i = IoSerial()

serial_device = "/dev/pts/4"

# Change this to your desired initialisation params
#i.open(read_fifo = settings.FIFO_CLIENT_NAME, write_fifo = settings.FIFO_MASTER_NAME)
i.open(device = serial_device, nonblock=True)

logger.debug("Reading any remaining data in input buffer")
i.read()
i.close()
i.open(device = serial_device)
logger.debug("Ready")

""" % (__file__)

f_func = ""

for sdl_key in SDL_FUNCTIONS.keys():
	sdl_func = SDL_FUNCTIONS[sdl_key]
	params_names_ = sdl_func["PARAMS_NAMES"]
	params_names = []
	suffix = 1
	for p in params_names_:
		if p not in params_names:
			params_names.append(p)
		else:
			new_p = p
			suffix = 1
			missing = True
			while missing is True:
				if new_p not in params_names:
					params_names.append(new_p)
					missing = False
				else:
					suffix += 1
					new_p = p + str(suffix)

	f_args = ","
	f_args = f_args.join(params_names)
	f_func += """
def %s(%s):
	''' Autogenerated call for function %s'''

	datasent = packetWrap("%s", [%s])	
	logger.debug("Sending " + str(datasent))

	start = time.time()
	# Send request
	bytes_sent = i.write(datasent)
	dataread = None

	# Wait for response
	while dataread is None:
		dataread = i.read()
		if time.time() > (start + settings.TIMEOUT):
			logger.warn("Timer exceeded waiting for response")
			break
	logger.debug("Function call took " + str(time.time() - start) + "s")
	# Decode and return response value
	if dataread is not None:
		return packetToReturnCode("%s", dataread)
	else:
		logger.warn('No response data')
		return False
 
""" % (sdl_func["SDL_NAME"], f_args, sdl_func["SDL_NAME"], sdl_key, f_args, sdl_key)

print(f_header)
print(f_func)
